<%= render :partial => "header", :locals => { :method_name => "Instant-runoff", :winners => results[:winners], :warnings => results[:warnings][:preferences] } %>
<div>
	<h4>Description</h4>
	<p>Voters rank candidates in an order of preference. The candidate with the fewest number of votes is eliminated and their votes are transferred to the supporting voters' next preferred candidates. This process is repeated until one candidate remains.</p>
	<%= render :partial => "preferences_warning", :locals => { :method_name => "Instant-runoff", :warnings => results[:warnings][:preferences] } %>

	<%= render :partial => "preference_ballots", :locals => { :preferences => results[:preferences] } %>

	<% for round in (0..results[:supporters].length-2) %>
		<h4>Step <%= round+1 %></h4>
		<%= render :partial => "supprting_demographics", :locals => { :supporters => results[:supporters][round], :votes => results[:votes][round] } %>
		
		<% eliminated = results[:eliminated][round] %>
		<% if !results[:warnings][:ties][round].nil? %>
			<p class="ui-state-error ui-corner-all">In the event of a tie, such as we have between <em><%= terms(results[:warnings][:ties][round],"</em>, <em>","</em> and <em>") %></em>, we're going drop the least popular from an election between that subset.</p>
		<% end %>
		<p><em><%= terms(eliminated,"</em>, <em>","</em> and <em>") %></em> <%= eliminated.length == 1 ? "is" : "are" %> eliminated.</p>
	<% end %>
	
	<%= render :partial => "result", :locals => { :winners => results[:winners] } %>
</div>
